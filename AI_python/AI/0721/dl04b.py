# -*- coding: utf-8 -*-
"""DL04b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WIgo7edrz3orUmhnwOgiek9MfPE33ezj
"""

from tensorflow import keras
model = keras.models.load_model('drive/MyDrive/00AI/asl_model')

model.summary()

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def show_image(image_path):
	image = mpimg.imread(image_path)
	plt.imshow(image)

show_image('drive/MyDrive/00AI/b.jpg')

#from tensorflow.keras.preprocessing import image as image_utils
import tensorflow as tf
image_utils=tf.keras.preprocessing.image
def load_and_scale_image(image_path):
    image = image_utils.load_img(image_path, color_mode="grayscale", target_size=(28,28))
    return image

image = load_and_scale_image('drive/MyDrive/00AI/b.jpg')
plt.imshow(image, cmap='gray')

image = image_utils.img_to_array(image)

# This reshape corresponds to 1 image of 28x28 pixels with one color channel
image = image.reshape(1,28,28,1)

image = image / 255

prediction = model.predict(image)
print(prediction)

import numpy as np
np.argmax(prediction)

alphabet = "abcdefghiklmnopqrstuvwxy"
dictionary = {}
for i in range(24):
	dictionary[i] = alphabet[i]
dictionary

dictionary[np.argmax(prediction)]

def predict_letter(file_path):
    show_image(file_path)
    image = load_and_scale_image(file_path)
    image = image_utils.img_to_array(image)
    image = image.reshape(1,28,28,1)
    image = image/255
    prediction = model.predict(image)
    # convert prediction to letter
    predicted_letter = dictionary[np.argmax(prediction)]
    return predicted_letter

predict_letter('drive/MyDrive/00AI/b.jpg')

predict_letter('drive/MyDrive/00AI/a.png')

predict_letter('drive/MyDrive/00AI/b2.jpg')