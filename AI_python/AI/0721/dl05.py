# -*- coding: utf-8 -*-
"""DL05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1focbfMbyCzMjEai9dBq9aA-tlH6W9LQi
"""

#from tensorflow.keras.applications import VGG16
import tensorflow as tf
# load the VGG16 network *pre-trained* on the ImageNet dataset
model = tf.keras.applications.VGG16(weights="imagenet")

model.summary()

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def show_image(image_path):
  image = mpimg.imread(image_path)
  print(image.shape)
  plt.imshow(image)

show_image("drive/MyDrive/00AI/happy_dog.jpg")

#from tensorflow.keras.preprocessing import image as image_utils
#from tensorflow.keras.applications.vgg16 import preprocess_input
image_utils=tf.keras.preprocessing.image
preprocess_input=tf.keras.applications.vgg16.preprocess_input

def load_and_process_image(image_path):
	# Print image's original shape, for reference
	print('Original image shape: ', mpimg.imread(image_path).shape)

	# Load in the image with a target size of 224, 224
	image = image_utils.load_img(image_path, target_size=(224, 224))
	# Convert the image from a PIL format to a numpy array
	image = image_utils.img_to_array(image)
	# Add a dimension for number of images, in our case 1
	image = image.reshape(1,224,224,3)
	# Preprocess image to align with original ImageNet dataset
	image = preprocess_input(image)
	# Print image's shape after processing
	print('Processed image shape: ', image.shape)
	return image

processed_image = load_and_process_image("drive/MyDrive/00AI/brown_bear.jpg")

#from tensorflow.keras.applications.vgg16 import decode_predictions
decode_predictions=tf.keras.applications.vgg16.decode_predictions
def readable_prediction(image_path):
	# Show image
	show_image(image_path)
	# Load and pre-process image
	image = load_and_process_image(image_path)
	# Make predictions
	predictions = model.predict(image)
	# Print predictions in readable form
	print('Predicted:', decode_predictions(predictions, top=3))

readable_prediction("drive/MyDrive/00AI/happy_dog.jpg")

readable_prediction("drive/MyDrive/00AI/brown_bear.jpg")

readable_prediction("drive/MyDrive/00AI/sleep_cat.jpg")

readable_prediction("drive/MyDrive/00AI/mask.jpg")

import numpy as np
def doggy_door(image_path):
	show_image(image_path)
	image = load_and_process_image(image_path)
	preds = model.predict(image)
	if 151 <= np.argmax(preds) <= 268:
		print("Doggy come on in!")
	elif 281 <= np.argmax(preds) <= 285:
		print("Kitty stay inside!")
	else:
		print("You're not a dog! Stay outside!")

doggy_door('drive/MyDrive/00AI/brown_bear.jpg')

doggy_door('drive/MyDrive/00AI/happy_dog.jpg')

doggy_door('drive/MyDrive/00AI/sleep_cat.jpg')